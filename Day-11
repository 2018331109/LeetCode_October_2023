2251. Number of Flowers in Full Bloom

STATEMENT
You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means 
the ith flower will be in full bloom from starti to endi (inclusive). 
You are also given a 0-indexed integer array people of size n, where people[i] is 
the time that the ith person will arrive to see the flowers.
Return an integer array answer of size n, where answer[i] is the number of flowers 
that are in full bloom when the ith person arrives.

SOLUTION
C++
#include <vector>
#include <algorithm>

using namespace std;

class Solution
{
public:
    vector<int> fullBloomFlowers(vector<vector<int>>& flowers, vector<int>& people)
    {
        vector<int> left;
        vector<int> right;
        for (const vector<int>& flow : flowers)
        {
            left.push_back(flow[0]);
            right.push_back(flow[1]);
        }

        sort(left.begin(), left.end());
        sort(right.begin(), right.end());

        vector<int> result;
        for (int vl : people)
        {
            int bloomed = upper_bound(left.begin(), left.end(), vl) - left.begin();
            int closed = lower_bound(right.begin(), right.end(), vl) - right.begin();
            result.push_back(bloomed - closed);
        }

        return result;
    }
};


PYTHON
from typing import List
from bisect import bisect_left, bisect_right

class Solution:
    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -> List[int]:
        left = []
        right = []
        for flower in flowers:
            left.append(flower[0])
            right.append(flower[1])

        left.sort()
        right.sort()

        result = []
        for vl in people:
            bloomed = bisect_right(left, vl) - bisect_left(right, vl)
            result.append(bloomed)

        return result
